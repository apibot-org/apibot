(ns apibot.core
  (:require
    [apibot.api :as api]
    [apibot.auth0 :as auth0]
    [apibot.grexec :as grexec]
    [apibot.raven :as raven]
    [apibot.router :as router]
    [apibot.storage :as storage]
    [apibot.util :as util]
    [apibot.views.dialogs :as dialogs]
    [apibot.views.editor :as editor]
    [apibot.views.executables :as executables]
    [apibot.views.execution :as execution]
    [apibot.views.login :as login]
    [apibot.views.navbar :as navbar]
    [apibot.views.tasks-dialog :as tasks-dialog]
    [cljsjs.papaparse]
    [promesa.core :as p]
    [reagent.core :as reagent :refer [atom cursor]]))

(enable-console-print!)

;; ---- App State ----

(def *app-state
  (atom
    {:graphs     grexec/graphs
     :executions {}
     :ui         {:selected-graph-id     nil
                  :tasks-dialog-expanded true}}))

;; ---- Views ----

(defn editor-page [& args]
  [:div
   [navbar/navbar *app-state]
   [tasks-dialog/tasks-dialog *app-state]
   [:div.container-fluid
    [editor/editor *app-state]]])

(defn executions-page [graph-id & args]
  [:div
   [navbar/navbar *app-state]
   [:div.container-fluid
    [execution/execution graph-id *app-state]]])

(defn executables-page [& args]
  [:div
   [navbar/navbar *app-state]
   [:div.container-fluid
    [executables/executables *app-state]]])

(defn login-page [& args]
  [:div
   [:div.container
    {:style {:max-width "730px"}}
    [login/login *app-state]]])


;; ---- Routes ----

(router/register! :editor editor-page)
(router/register! :executions executions-page)
(router/register! :executables executables-page)
(router/register! :login login-page)
(router/configure!
  (fn [current-page args]
    (reagent/render [:div (apply current-page args) [dialogs/dialog-view]]
                    (.getElementById js/document "app-container"))))

;; ---- Initialize App ----

(defn init! []
  ;; Load the initial state: graphs and profile
  (raven/init!)
  (if (api/token?)
    (-> (api/bootstrap! *app-state)
        (p/then (fn [& args] (router/dispatch! :editor)))
        (p/catch (fn [error]
                   (raven/capture-exception error)
                   (router/dispatch! :login))))
    (router/dispatch! :login)))
